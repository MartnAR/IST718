# Import required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt 
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder

%matplotlib inline

# Load the dataset 
df = pd.read_csv('Documents/Syracuse University/IST 718 Big Data Analytics/Week 2/dodgers.csv')
df.head()

# Explore attendance distribution by month, day of the week, and opponent. 
plt.figure()
plt.subplot(2, 2, 1)
sns.boxplot(x='month', y='attend', data=df)
_ = plt.xlabel('Month')
_ = plt.ylabel('Attendance')
_ = plt.title('Attendance per Month')

plt.subplot(2, 2, 2)
sns.boxplot(x='day_of_week', y='attend', data=df)
_ = plt.xlabel('Day of Week')
_ = plt.ylabel('Attedance')
_ = plt.title('Attendance per Day of Week')

plt.subplot(2, 2, 3)
sns.stripplot(x='attend', y='opponent', data=df, hue='day_night', palette='Blues')
_ = plt.xlabel('Attendance')
_ = plt.ylabel('Oppontent')
_ = plt.title('Attendance by Opponent')

# Explore attendance by temperature and bobblehead promotion
g = sns.FacetGrid(df, col='day_night', row='skies', hue='bobblehead')
g = (g.map(plt.scatter, 'temp', 'attend').add_legend())
g = g.set_axis_labels('Temperature', 'Attendance')

# Create a new data frame keeping month, day_of_week, bobblehead, and attendance columns.
df2 = df[['month', 'day_of_week', 'bobblehead', 'attend']]

# Use LabelEncoder to convert month, day_of_week, and bobblehead to numeric values.
le = LabelEncoder()
indexCols = ['month', 'day_of_week', 'bobblehead']
for i in indexCols:
    df2.loc[:,i] = le.fit_transform(df2.loc[:,i])

# Estabilsh a random seed and split the data into train and test sets. 
np.random.seed(42)
X_train, X_test, y_train, y_test = train_test_split(df2[['month', 'day_of_week', 'bobblehead']], df2['attend'], test_size=0.3)

# Build the linear model
lm = LinearRegression()
model = lm.fit(X_train, y_train)

# Print the model results.
print('Model Score:', model.score(X_train, y_train))
print('Y-Intercept:',model.intercept_)
print(list(zip(indexCols, model.coef_)))